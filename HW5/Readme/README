                         Programming Assignment #5
 		              An Awkward Game

Due: Saturday, June 16  at  11:59 pm.

Submission method: You will post to the course website, just like the previous
                   assignments. 

Submission rules: I REQUIRE you to FOLLOW THESE RULES:

                  1. Submit one file named "<your student ID>.pa5.tar"
                     It will contain two files: "game5" and "handle.awk".
		     
                  2. Submissions made after the deadline will be ignored.
                     (That means: no late submissions on this assignment.)
                     (By the way, if you don't turn in your assignments, you
                      will probably Fail The Class. That's a Fact. So start
                      early and ask questions.)
                  
                  This is a large class. Unless each of you follows the above
                  rules, the TAs' work becomes so hard. So I INSIST that you 
                  FOLLOW the above rules. If you don't, we won't accept your 
                  homework.

                  If you have questions about these rules, you may post your 
                  questions to the course website.


Getting help:   - The Professor has office hours on Monday from 12:30-2:30, 
                  and on Friday from 10:00-12:00, in room 9037.  He can also 
                  be reached by email.
                - The TAs are also available to answer your questions.
                - Questions about the assignment can be posted to the 
                  Discussion Forum.
                - You may also discuss the ideas of the assignment with your
                  classmates. Such discussions can be quite helpful to your 
                  learning -- IF you ONLY talk about the general concepts of
		  the steps of the assignment.
		  - If, however, you tell other students the specific details
		    of your implementation, then you are not helping each other
		    to learn; you are just doing the work for them.
                    In other words, you are cheating. You CANNOT show another
		    student ANY part of the answer to the assignment.

Cheating policy:  We encourage students to form study groups. But this does not
                  mean sharing code. If students are found to be sharing work,
		  they can receive a 0 for the entire course, or worse.
                  It is cheating to let another student see your work, or to 
                  let them look over your shoulder when your code is on the
		  screen.
		  A good way to know you cheated: if you have code that is in
		  your solution just because another student told you to put
		  it there, but you don't actually understand it.
		  If you are still unsure, you can ask the TA for more
		  explanation.
                  We always look for evidence of cheating, so don't do it.
                  (In any event, even if you do not get caught, those who 
                  copy the homework will not learn the material, so they 
                  will fail the exam.)

Most Important    The programming assignments are a large part of the grade.
Things to Know:	  This large point value means that, if you don't do them, you
		  will fail.
		  The large point value also explains why the policy against
		  cheating is strictly enforced.
		  

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

,,,,,,,,,,,,,,,,,,
: Provided files :
''''''''''''''''''

The provided file, READMEwalkthroughs, explains the expected behavior of this
homework.

The provided file, READMEhandle, explains the design of the handle.awk file.

This present README file describes the design of the game5 file.

,,,,,,,,,,,,,,,,,,,,,,,,,,,,
: A Discussion of Synonyms :
''''''''''''''''''''''''''''

One of the tasks that you will have to do in this assignment is to simplify the
possible commands that can be typed by replacing words with synonyms. These
synonyms are as follows:
 - throw -> drop
 - get -> take
 - board -> enter
 - inventory -> i
 - examine, look, x -> l   BUT: Only if the inputted command was just one word.
 - examine, look, l -> x   BUT: Only if the inputted command was more than one
	                                word (ie, an object was also inputted).
 - switch -> press

And the synonyms for objects are:
 - nitric -> acid
 - button -> switch

Looking above, notice that two rules involve "switch". The reason for this is
that the word "switch" is both a verb and a noun. You can "switch on a light"
and you can "flip on a switch". I have chosen the synonyms above based on the
behavior of the original game. In one of the rooms, the game says:
                                                                     vvvvvv
You are in some sort of maintenance room for the museum.  There is a switch on
the wall labeled ‘BL’.  There are doors to the west and north.       ^^^^^^


When I first tried to play the game I typed:
> flip switch
I don't understand that.
>

See that the game did not understand the verb "flip". (I think it should have
been coded to understand "flip", but they didn't ask me, so...)

Since flip didn't work, I tried the VERB "switch":
> switch switch
The button is now in the on position.
>

So that worked. But the displayed message indicated that it's really a "button"
not a "switch". So that made wonder if I could have called it a "button". And
if it is a button, then maybe I could "press" it instead of "switching" it:
> press button
The button is now in the off position.
>

So what have we learned? We have learned that there are synonyms:
  "switch switch", "switch button",  "press button" -> "press switch"

,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
: A Line-by-Line Description of the game5 file :
''''''''''''''''''''''''''''''''''''''''''''''''

Lines 1-9:
  #!/usr/bin/tcsh
  cd; rm -rf PA5
  tar -xvf PA5.tar >& /dev/null
  cp [BMIJ]0[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9].pa5/handle.awk PA5/scripts
  cd ~/PA5/start
  ~/PA5/scripts/display -f
  while ( 1 )
     cd `pwd -P`
     echo -n ">"

Line 10: This line creates a variable by reading the keyboard input.
	 
Line 11: This line creates a variable that simplifies what was read from the
         keyboard. To accomplish this simplification, use sed.
	 The simplification involves removing all unnecessary spaces or tabs,
	 so that there will be just one space between each word, and no other
	 spaces anywhere.
	 More notably, the simplification also involves replacing words with
	 synonyms that were described earlier in this document.

Line 12: This line creates an array, named A, from the words in the string
         created on line 11. But it adds an extra element at the end of the
	 array. (The reason for this extra element is that the user might
	 only type one word, and we want to be able to access the second
	 element without crashing the program.)
	 
Line 13: This line is empty

Line 14: This line tests to see if the array that was just created has no
         elements. If so, execute a continue command to go back to the top
	 of the while loop.
	 
Line 15: This line is empty

Lines 16-19: These lines deal with the case where the user is on the bus and is
             trying to either take or drop an item. (And, by the way, you know
	     that you are on the bus if the bus file is in your inventory.)
	     The way to handle it is to:
	     1. Print the appropriate error message about this action not being
	        allowed while on the bus. Note: drop and take produce different
                messages.
	     2. Execute a continue command to go to the top of the while loop.

Lines 20: This line is empty

Line 21-34:
  if ( $A[1] == quit ) then
    exit
  else if ( $A[1] == l ) then
    ~/PA5/scripts/display -f
  else if ( $A[1] == i ) then
    echo You currently have:
    ls ~/PA5/inventory | sed 1i. | ~/PA5/scripts/name.sed
  else if ( ( $A[1] == "take" ) && ( $A[2] == "all" ) ) then
    ls | sed 1i:\ Taken. | ~/PA5/scripts/name.sed  | tee ~/PA5/worked
    if ( -z ~/PA5/worked ) then
      echo Nothing to take.
    else
      mv `____` ~/PA5/inventory 
    endif

The above code is all given to you, except for the "mv `____` ~/PA5/inventory"
line. The purpose of the `____` is to use the ~/PA5/worked file to get a list
of the objects that you will take (ie, that you will move to the inventory
directory).

Line 35: else if ( ( $A[1] == drop ) || ( $A[1] == take ) || ( $A[1] == x ) || ( $A[1] == press ) ) then

Line 36:   ~/PA5/scripts/handle ____ && echo $A[1] $A[2] | awk '____' | ~/PA5/scripts/name.sed  | sed 's/.*D/Done./'

This is a very long line. It starts by executing the handle script that I have
given you. As you can see in the handle script, it takes the user's input as
arguments (for you, that means the variable that you created on Line 11).
Now, the handle script exits with either a 0 or a 1. If it exits with a 0,
then that means that the user's inputted command is valid and needs to be
processed. (If it exits with a 1, then there is nothing else to do.)

So, what is the next step, if handle had exited with a 0? The next step is
an awk command-line program that prepares the input for the name.sed script
that we created in the last homework (and which I have provided a solution
to).

But what does it mean to "prepare" the input? Well, that's what the scripts
whenLooking, whenTaking, and whenInventorying had done in the last homework.
We are going to do the same thing here. The main difference is that we now
want to use awk instead of sed, and to deal with two cases (take, and drop)
in this one awk program. The logic is:
Awk receives one input line, containing two fields: the command and the object.
If the first field is "take", then do the preparation work of whenTaking.
If the first field is "drop", then do a new preparation that was not in
programming assignment 4, because there was no whenDropping script in that
homework. So what is the preparation? It is to put a D on the first line (ie,
the same as what "sed 1iD" would do.)
But what if the first field is "x" or "press"? In that case, just print the
second field, with no preparation.

work of whenTaking., and whenInventorying had done in the previous
awk now, so why not use it?).

Lines 37-56:
  else if ( $A[1] == enter ) then
    if ( -e ~/PA5/inventory/bus ) then
      echo You are already in the bus\!
    else if ( ! -e bus ) then
      echo "You can't go that way."
    else if ( ! -e ~/PA5/inventory/license ) then
      echo "You are not licensed for this type of vehicle."
    else 
      echo "You board the bus and get in the driver's seat."
      mv bus ~/PA5/inventory
    endif
  else if ( $A[1] == exit ) then
    if ( -e ~/PA5/inventory/bus ) then
      echo You hop off the bus.
      mv ~/PA5/inventory/bus .
    else if ( ! -e bus ) then
      echo You can\'t go that way.
    else 
      echo You are already off the bus\!
    endif
    

Line 57:  else if ( ____ ) then

This line test for whether the user has typed one of these directions:
n,s,e,w,ne,se,nw,sw,u,d.  (Yes, some of these directions are not used in this
part of the game. But they are directions.)

Lines 58-71:
    set rev = `echo $A[1]|tr news swen`
    if ( -d $A[1] ) then
      cd $A[1]
      ~/PA5/scripts/display
    else if ( -d ../$rev ) then
      cd ..
      ~/PA5/scripts/display
    else
      echo You can\'t go that way.
    endif
  else
    echo I don\'t understand that.
  endif
end
