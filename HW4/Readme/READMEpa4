                          Programming Assignment #4
 		       Saying What Dunnet Said with Sed 

Due: Tuesday, May 22  at  11:59 pm.

Submission method: You will post to the course website, just like the previous
                   assignment. 

Submission rules: I REQUIRE you to FOLLOW THESE RULES:

                  1. Submit one file named "<your student ID>.pa4.sed"
                     It will be a sed script.
		     
                  2. Submissions made after the deadline will be ignored.
                     (That means: no late submissions on this assignment.)
                     (By the way, if you don't turn in your assignments, you
                      will probably Fail The Class. That's a Fact. So start
                      early and ask questions.)
                  
                  This is a large class. Unless each of you follows the above
                  rules, the TAs' work becomes so hard. So I INSIST that you 
                  FOLLOW the above rules. If you don't, we won't accept your 
                  homework.

                  If you have questions about these rules, you may post your 
                  questions to the course website.


Getting help:   - The Professor has office hours on Monday from 12:30-2:30, 
                  and on Friday from 10:00-12:00, in room 9037.  He can also 
                  be reached by email.
                - The TAs are also available to answer your questions.
                - Questions about the assignment can be posted to the 
                  Discussion Forum.
                - You may also discuss the ideas of the assignment with your
                  classmates. Such discussions can be quite helpful to your 
                  learning -- IF you ONLY talk about the general concepts of
		  the steps of the assignment.
		  - If, however, you tell other students the specific details
		    of your implementation, then you are not helping each other
		    to learn; you are just doing the work for them.
                    In other words, you are cheating. You CANNOT show another
		    student ANY part of the answer to the assignment.

Cheating policy:  We encourage students to form study groups. But this does not
                  mean sharing code. If students are found to be sharing work,
		  they can receive a 0 for the entire course, or worse.
                  It is cheating to let another student see your work, or to 
                  let them look over your shoulder when your code is on the
		  screen.
		  A good way to know you cheated: if you have code that is in
		  your solution just because another student told you to put
		  it there, but you don't actually understand it.
		  If you are still unsure, you can ask the TA for more
		  explanation.
                  We always look for evidence of cheating, so don't do it.
                  (In any event, even if you do not get caught, those who 
                  copy the homework will not learn the material, so they 
                  will fail the exam.)

Most Important    The programming assignments are a large part of the grade.
Things to Know:	  This large point value means that, if you don't do them, you
		  will fail.
		  The large point value also explains why the policy against
		  cheating is strictly enforced.
		  

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 


,,,,,,,,,,,,,,,,,,,,,,,,,,
: Assignment Description :
''''''''''''''''''''''''''
One of the files that we made in the previous assignment was "name". It was a
C-shell script that displayed an object with its correct article (eg: an egg,
or some coins). This file was created because the actual Dunnet game displays
objects with their articles. For example, when you start the game, you see:

% emacs -batch -l dunnet
Dead end
You are at a dead end of a dirt road.  The road goes to the east.
In the distance you can see that it will eventually fork off.  The
trees here are very tall royal palms, and they are spaced equidistant
from each other.
There is a shovel here.
>

You see that? There is a shovel. The shovel is not part of our game (because
it gets lost, in the actual game, before you get back to the house). But, even
though the shovel is not part of our game, we do see that Dunnet does, indeed,
display the article "a" before shovel. In fact, we can further note that the
game displays a whole sentence "There is a shovel here." We will be making
sentences like that in this assignment.

Lets see what happens if we play the game some more. I'll jump ahead a little.
Imagine that I ran these commands "restore house", "get key", "e", "n", "s".
In that case, the most recent thing we would see is:
>s
Old Building hallway
>

Now let's go back north:
>n
Meadow
There is a lamp nearby.
There is a bus driver's license here.
There is a silver bar here.
>

You see that? These objects also display sentences. And notice that some of
the objects also have adjectives: the license, for example, is actually a
bus driver's license. In this new assignment, we will want to get the exact
same output.

But there is more to the assignment, because there are  other objects besides
those lying on the ground. There are, for example, those in you inventory.
Let's look at our inventory now:

>i
You currently have:
A brass key
>

You see the difference? This time it's not a sentence: there is no verb and no
period at the end. But there still is the article and the occasional adjective.
Also, the article is capitalized this time.

But let's move on, because there is a third way that objects get displayed.
This happens when you try to pick them up. Let's see that:

>s
Old Building hallway
>n
Meadow
There is a lamp nearby.
There is a bus driver's license here.
There is a silver bar here.
>get all
A lamp: Taken.  
A license: Taken.  
A silver bar: Taken.  
>

Do you see that? This time it ends with ": Taken." Also, notice that some
objects don't show the same adjectives that they displayed when lying on the
ground: the "license" doesn't say "bus driver's" license.

Now that we've picked these up, let's see how they look in our inventory:

>i
You currently have:
A brass key
A lamp
A license
A silver bar
>

From the above, we see that they display very similar to how they displayed
when we picked them up (but they don't say 'Taken', of course).

Let's skip ahead. Suppose that we type: "w", "n", "n", "n","n","e","e","e",
"e", and then "e". Then the last thing that would have displayed is:

>e
Fifth-Sycamore intersection
You are at the north end of Fifth Street and the east end of Sycamore Ave.
There is a bus here.
>

You see? There is a bus here. Just like those other objects that we picked
up before were also there when we picked them up. So let's try to pick up
the bus:

>get all
Nothing to take.
>

See? You can't pick up the bus. OK, let's keep walking (in the real game,
which has more streets than our version does):

>s
Fifth-Vermont intersection
You are at the intersection of Fifth Street and the east end of Vermont Ave.
>s
Fifth-Oaktree intersection
You are at the intersection of Fifth Street and the east end of Oaktree Ave.
There is a cliff off to the east.
There are some valuable coins here.
>

So now we have reached a place with two objects. We can look at them both:

>examine cliff
It is a HIGH cliff.
>examine coins
They are old coins from the 19th century.
>

These are the messages that we stored in those object files in the earlier
homeworks. But the cliff and the coins are very different types of objects,
as the following shows:

>n
Fifth-Vermont intersection
>s
Fifth-Oaktree intersection
There are some valuable coins here.
>

Do you see that? The cliff is not actually a displayed object. It is just
a line in the .description file. But it also is an object, because you can
examine it. let' try picking things up:

>get all
Some valuable coins: Taken.
>get cliff
You cannot take that.
>i
You currently have:
A brass key
A lamp
A license
A silver bar
Some valuable coins
>

See that the coins say "Some" like in the last programming assignment. But they
also have the adjective "valuable".

OK. That's enough with the actual game. Let's move on.


,,,,,,,,,,,,,,,,,,
: Provided files :
''''''''''''''''''

If you are reading this file, then you must have un-tarred the PA4.tar file.
Looking in the directory containing this README file, you will find:

% ls
AllThatCouldBeInARoom  README  whenInventorying  whenLooking  whenTaking
%

The README file is this file you are reading now.

AllThatCouldBeInARoom is directory. It contains a collection of all the files
that could possibly be in a directory during the game. Let's check it out:

% cd AllThatCouldBeInARoom
% ls
acid  bone   coins     e     gate       key      mail    nw    silver  tanks
bin   bus    computer  egg   glycerine  lamp     n       ruby  switch  w
bins  cliff  dinosaur  fish  jar        license  nitric  s     tank
%

Above, we see all of the objects. Notice the cliff (and the bins, tank, etc).
Objects like these don't display, but they are present, because they can be
examined in the game (but this assignment won't implement examine).

In the above listing, we also see all of the directions that ever exist in
our part of the Dunnet game. The directory also contains hidden description
files, but they don't affect this assignment. 

Let's move on to the other provided files:

% cd ..
% ls
AllThatCouldBeInARoom  READMEpa4  whenInventorying  whenLooking  whenTaking
%

So what are these "when..." files? Well, they are each one a 1-line script.
For example let's take a look at "whenInventoring":

% cat whenInventorying
ls | sed 1i. | ~/[BMIJ]0[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9].pa4.sed
%

What is that? Well it starts with an "ls" to find the contents of the current
directory. This get piped into a sed command. You know "i" (insert), but
not "1". Well you'll meet it in Lecture 10. Any way, all that "1d." does is
to insert a line containing a '.' above the FIRST line of the input file.
Afterwards, the result is sent into a file named "xxxxxxxxxx.pa4.sed". This
file is your program (ie, replace the x's with your student ID).

Notice that it is a sed file, and that it is an executable.

Let's look at the other two provided files:

% cat whenLooking
ls | sed 1ihere. | ~/[BMIJ]0[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9].pa4.sed
% cat whenTaking
ls | sed 1i:\ Taken. |~/[BMIJ]0[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9].pa4.sed
%

A comparison of these three scripts reveals that they put different things on
the first line. And those "different things" match with their names. Look, for
example at "whenTaking". This script puts the phrase ": Taken." on the first
line -- and that phrase is, in fact, the phrase that goes at the end of the
line when you take something.


,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
: A Discussion of the Expected Program Behavior :
'''''''''''''''''''''''''''''''''''''''''''''''''

Maybe this is all a little hard to grasp without seeing it in action. So let us
use it:

% cd AllThatCouldBeInARoom
% ../whenLooking
There is a packet of nitric acid here.
There is a dinosaur bone here.
There is a bus here.
There are some valuable coins here.
There is a jewel-encrusted egg here.
There is a packet of glycerine here.
There is a glass jar here.
There is a shiny brass key here.
There is a lamp nearby.
There is a bus driver's license here.
There is a valuable ruby here.
There is a silver bar here.
%

See that? These are the 12 things that can be lying on the ground in a room.
Each of them is displaying exactly as Dunnet displays it. Note, however, that
"nitric" and "acid" only display once, just like in the real game. (Ultimately,
this means that only one of them should show; the other should get ignored like
"cliff" got ignored (otherwise the message "There is a packet of nitric acid 
here." would display twice.) It is up to you to decide which one to ignore.

Note that we are not saying that all 12 things will always print. Only the
things that are actually present will print. For example, suppose that the
files from homework 3 are in their initial state. Then watch this:

% cd ~/PA3/start/e/n
% ~/PA4assignment/whenLooking
There is a lamp here.
There is a bus driver's license here.
There is a silver bar here.
%

Understand? Then let us now see how the objects look when we pick them up:

% cd ~/PA4assignment/AllThatCouldBeInARoom
% ../whenTaking
Some nitric acid: Taken.
A bone: Taken.
Some valuable coins: Taken.
A valuable egg: Taken.
Some glycerine: Taken.
A glass jar: Taken.
A brass key: Taken.
A lamp: Taken.
A license: Taken.
A ruby: Taken.
A silver bar: Taken.
%

It is important to realize that our assignment is only about displaying these
messages, not actually pick them up.
And also notice that 11 objects display, not the 12 that whenLooking had shown
(the bus doesn't print this time).

Now let's see what they look like in our inventory:

../whenInventorying
Some nitric acid
A bone
Some valuable coins
A valuable egg
Some glycerine
A glass jar
A brass key
A lamp
A license
A ruby
A silver bar
%

This has a lot of similarity to whenTaking's output.

Again, it is important to notice that this is only the output if everything
is in the inventory. If we suppose that the files from homework 3 are in their
initial state. Then watch this:

% cd ~/PA3/inventory
% ~/PA4assignment/whenInventorying
%

It makes sense, right? Because you start the game with no objects in your
inventory (although you can pick up the key in the first room).


,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
: A Discussion of the Program Implementation :
''''''''''''''''''''''''''''''''''''''''''''''

All of the different outputs above may seem arbitrary, but we are just trying
to match what the real game does. The above messages are exactly how these
things display in the game.

So how to do it? Well, to begin, recall how the three provided scripts compare:

% cat whenInventorying
ls | sed 1i. | ~/[BMIJ]0[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9].pa4.sed
% cat whenLooking
ls | sed 1ihere. | ~/[BMIJ]0[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9].pa4.sed
% cat whenTaking
ls | sed 1i:\ Taken. |~/[BMIJ]0[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9].pa4.sed
%

They each put the appropriate line endings at the beginning of the file. For
example:

% cd ~/PA3/start/e/n
% ls | sed 1i:\ Taken.
: Taken.
lamp
license
silver
%

So now, how does B012345678.pa4.sed process this input? Well, it is clever.
Note, for example, that sed has no variables. We inform sed about which of the
three display options to use by what we pass in on the first line. Even though
we can't save this information in a variable, we can save this first line into
the hold space. Then, as new lines come in, we can append this hold space at
the end of those lines (remember that there will also be a \n). Moreover, once
we have appended this information to a particular line, that line's pattern
space is changed. The end of the line can be matched by a regular expression
to distinguish the three cases, when needed.

Note: the above implementation will use the '1' command, just like the scripts
like whenTaking did. Its a simple idea, but I just point it out because we
haven't learned this command yet (we'll learn it in Lecture 10, so just a
couple days from now).

Now then, how to do the sed script?
Well, think about what you want to do. You want to convert 11 or 12 objects
and throw away all of the others.

So the first line of your script is, depending on your system, either:
#!/usr/bin/sed -f
or
#!/bin/sed -f

The second line puts the first input line into the hold space

The third input line matches to all of the 12 objects and none of the other
files in AllThatCouldBeInARoom. It also deletes all lines that don't match.
Note: You must do this with one regular expression. And you do assume that
there will never be an input that isn't found in the AllThatCouldBeInARoom
directory.

The remaining lines of the file convert the different patterns. The key, for
example, gets replaced with "brass key" or even "shiny brass key" (depending,
of course, on what the end of the line looks like).

These objects can be handled in parts. For example, we can turn "key" into
"brass key" first. And then only add "shiny" if needed.

These objects can also be processed in any order. You'll know that you are
done when you get the IDENTICAL outputs within AllThatCouldBeInARoom that
I've shown above, for all three cases.


,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
: The Grading of the Assignment :
'''''''''''''''''''''''''''''''''

The philosophy of sed is to make programs as small as possible. So you will
be graded on how small your program is. Here is how big mine is (ignoring
the #!/... line):

% cat ~/B012345678.sed | sed 1d | wc -c
392
%

Here will be the grading policy:
Above 100% -- Works with fewer characters than 392
100% -- Works with 392 characters
50% -- Works but with the most characters of anyone in the class
49% -- Has just one character outputted wrong anywhere in the output,
       regardless of file size.
...

From the above, we see that nothing else matters if the output is not precise.
Suppose you type:
% cd ~/PA4assignment
% cat READMEpa4 | sed -n '312,323p;348,358p;369,379p' > ~/expectedTakenOutput
% cd AllThatCouldBeInARoom
% ./whenLooking > ~/myOutput
% ./whenTaking >> ~/myOutput
% ./whenInventorying >> ~/myOutput
% diff ~/expectedTakenOutput ~/myOutput
%

If you get output when you type diff, then you know that you cannot get more
than 49% on the assignment. Also, if the first three lines of your script
are not as described above, you cannot get more than 49%.
If, however, you don't get any difference, then you know that you will get
at least 50%, even if your sed program is huge.

Note: Don't cheat. It will be obvious to me if you cheat, because there are
so many ways to solve this problem. How do you not cheat? Don't show your
code to anyone or look at anyone's code. Think of it like an exam paper.
(You can, however, discuss general strategies with each other.)

Good luck. And start early.
